{"version":3,"sources":["endpoints/drivers/driver.post.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,8CAA6F;AAC7F,sDAAqJ;AACrJ,6CAA0C;AAC1C,sDAA8C;AAC9C,oCAAoC;AAEpC,4BAA4B;AAE5B,kBAA+B,GAAY,EAAE,GAAa;;QACtD,IAAI,CAAC;YACD,IAAI,GAAQ,EAAE,MAAW,EAAE,IAAS,EAAE,aAAkB,CAAC;YACzD,IAAI,aAAa,GAAQ;gBACrB,IAAI,EAAE,kBAAK,CAAC,OAAO;gBACnB,IAAI,EAAE,EAAE;gBACR,OAAO,EAAE,oCAAoC;aAChD,CAAC;YACF,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,MAAM,WAAE,CAAC,wCAA2B,CAAC,GAAG,CAAC,CAAC,CAAC;YAE3D,uBAAc,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAExC,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YAClB,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,MAAM,WAAE,CAAC,gBAAO,CAAC,0BAA0B,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;YAEpE,EAAE,CAAC,CAAC,GAAG,CAAC;gBAAC,MAAM,GAAG,CAAC;YAEnB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACP,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC;oBACnD,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;gBAGlE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC;oBAChD,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;YACtE,CAAC;YAED,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,yBAAgB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/C,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACxB,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,MAAM,WAAE,CAAC,gBAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;YAElD,EAAE,CAAC,CAAC,GAAG,CAAC;gBAAC,MAAM,GAAG,CAAC;YAGnB,CAAC,GAAG,EAAE,aAAa,CAAC,GAAG,MAAM,WAAE,CAAC,gBAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAA;YAEzE,EAAE,CAAC,CAAC,GAAG,CAAC;gBAAC,MAAM,GAAG,CAAC;YACnB,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAC9B,aAAa,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YAE/B,uBAAc,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;YAE/C,IAAI,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAChD,IAAI,CAAC,IAAI,GAAG,YAAY,IAAI,CAAC,IAAI;;2EAEkC,IAAI,CAAC,KAAK,0BAA0B,IAAI,CAAC,QAAQ;;;;;SAKnH,CAAC;YAEF,kBAAS,CAAC,IAAI,CAAC,CAAC;QAEpB,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,uBAAc,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC;IAGL,CAAC;CAAA;AA1DD,4BA0DC;AAED,8BAA2C,GAAY,EAAE,GAAa;;QAClE,IAAI,CAAC;YAED,IAAI,GAAQ,EAAE,MAAW,EAAE,IAAS,EAAE,aAAkB,EAAE,MAAW,CAAC;YACtE,IAAI,aAAa,GAAQ;gBACrB,IAAI,EAAE,kBAAK,CAAC,EAAE;gBACd,IAAI,EAAE,EAAE;gBACR,OAAO,EAAE,kCAAkC;aAC9C,CAAC;YAGF,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,MAAM,WAAE,CAAC,6BAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;YAEhD,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC9B,uBAAc,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC5C,CAAC;YACD,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAC/B,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,MAAM,WAAE,CAAC,gBAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;YAEhE,EAAE,CAAC,CAAC,GAAG,CAAC;gBAAC,MAAM,GAAG,CAAC;YAEnB,uBAAc,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAEnD,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,uBAAc,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC;IAGL,CAAC;CAAA;AA5BD,oDA4BC;AAGD,uBAAoC,GAAY,EAAE,GAAa;;QAC3D,IAAI,CAAC;YAED,IAAI,GAAQ,EAAE,MAAW,EAAE,IAAS,EAAE,aAAkB,EAAE,MAAW,CAAC;YACtE,IAAI,aAAa,GAAQ;gBACrB,IAAI,EAAE,kBAAK,CAAC,EAAE;gBACd,IAAI,EAAE;oBACF,OAAO,EAAC,EAAE;iBACb;gBACD,OAAO,EAAE,gCAAgC;aAC5C,CAAC;YAGF,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,MAAM,WAAE,CAAC,6BAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;YAEhD,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC9B,uBAAc,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC5C,CAAC;YAED,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAE/B,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,WAAE,CAAC,gBAAO,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;YAE7E,EAAE,CAAC,CAAC,GAAG,CAAC;gBAAC,MAAM,GAAG,CAAC;YAEnB,uBAAc,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAEnD,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,uBAAc,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC;IAGL,CAAC;CAAA;AAhCD,sCAgCC;AAGD,eAA4B,GAAY,EAAE,GAAa;;QACnD,IAAI,CAAC;YAED,IAAI,GAAQ,EAAE,MAAW,EAAE,IAAS,EAAE,aAAkB,EAAE,MAAW,CAAC;YACtE,IAAI,aAAa,GAAQ;gBACrB,IAAI,EAAE,kBAAK,CAAC,EAAE;gBACd,IAAI,EAAE,EAAE;gBACR,OAAO,EAAE,2BAA2B;aACvC,CAAC;YAEF,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;YAC/C,CAAC;YAGD,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,MAAM,WAAE,CAAC,gBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;YAE/C,EAAE,CAAC,CAAC,GAAG,CAAC;gBAAC,MAAM,GAAG,CAAC;YAGnB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACR,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC3C,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;gBACnD,IAAI;oBACA,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;YAC/D,CAAC;YAMD,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YACtB,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBAE9C,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,MAAM,WAAE,CAAC,gBAAO,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;gBAExD,EAAE,CAAC,CAAC,GAAG,CAAC;oBAAC,MAAM,GAAG,CAAC;YACvB,CAAC;YAED,CAAC,GAAG,EAAE,aAAa,CAAC,GAAG,MAAM,WAAE,CAAC,gBAAO,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;YAC/D,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAE3B,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAE9B,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC;gBACjB,IAAI,EAAE,IAAI;aACb,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAGnD,aAAa,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACjC,aAAa,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YAE/B,uBAAc,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAEnD,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,uBAAc,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC;IAGL,CAAC;CAAA;AA5DD,sBA4DC","file":"driver.post.js","sourcesContent":["\r\nimport { Request, Response } from 'express'\r\nimport { to, renderResponse, generateUniqueId, OTPSend, EmailSend } from '../../util/helper';\r\nimport { validateCustomerRegisteration, validateCustomerChangePassword, validateDriverRegisteration, validateLocation } from '../../util/Validators';\r\nimport { UserDao } from '../../dao/_index'\r\nimport { Codes } from '../../util/SiteConfig';\r\nimport * as jwt from 'jsonwebtoken';\r\n\r\nimport * as _ from 'lodash';\r\n\r\nexport async function register(req: Request, res: Response): Promise<any> {\r\n    try {\r\n        let err: any, result: any, user: any, driverProfile: any;\r\n        let finalResponse: any = {\r\n            code: Codes.CREATED,\r\n            data: {},\r\n            message: \"Driver registrated successfully !!\"\r\n        };\r\n        [err, result] = await to(validateDriverRegisteration(req));\r\n\r\n        renderResponse(res, result, null, null);\r\n\r\n        req.body.role = 2;\r\n        [err, user] = await to(UserDao.findCustomerByEmailOrPhone(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n        if (user) {\r\n            if (req.body.mobile.replace(/ +?/g, '') == user.mobile)\r\n                throw new Error(\"User already exist with this mobile number\");\r\n\r\n\r\n            else if (req.body.email.toLowerCase() == user.email)\r\n                throw new Error(\"User already exist with this email address\");\r\n        }\r\n\r\n        req.body.verifyOTP = generateUniqueId(null, 6);\r\n        req.body.isVerified = 1;\r\n        [err, user] = await to(UserDao.register(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n\r\n        [err, driverProfile] = await to(UserDao.setDriverProfile(req.body, user))\r\n\r\n        if (err) throw err;\r\n        _.extend(user, driverProfile);\r\n        finalResponse.data.user = user;\r\n\r\n        renderResponse(res, null, null, finalResponse);\r\n\r\n        user.subject = \" Rabbitrun Driver Registration\";\r\n        user.html = `<p>Hello ${user.name},</p>\r\n\r\n        <p> your account  is created successfully . you email address is ${user.email} and password would be ${user.password} for login.</p>\r\n        \r\n        <p>Regards,</p>\r\n        \r\n        <p>RabbitRun Team</p>\r\n        `;\r\n        //OTPSend(user);\r\n        EmailSend(user);\r\n\r\n    } catch (e) {\r\n        renderResponse(res, null, e, null);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport async function updateDriverLocation(req: Request, res: Response): Promise<any> {\r\n    try {\r\n\r\n        let err: any, result: any, user: any, driverProfile: any, device: any;\r\n        let finalResponse: any = {\r\n            code: Codes.OK,\r\n            data: {},\r\n            message: \"Location updated successfully !!\"\r\n        };\r\n\r\n\r\n        [err, result] = await to(validateLocation(req));\r\n\r\n        if (result && !result.isEmpty()) {\r\n            renderResponse(res, result, null, null);\r\n        }\r\n        req.body.id = req.body.user.id;\r\n        [err, device] = await to(UserDao.updateDriverLocation(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n        renderResponse(res, null, null, finalResponse);\r\n\r\n    } catch (e) {\r\n        renderResponse(res, null, e, null);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport async function nearByDrivers(req: Request, res: Response): Promise<any> {\r\n    try {\r\n\r\n        let err: any, result: any, user: any, driverProfile: any, device: any;\r\n        let finalResponse: any = {\r\n            code: Codes.OK,\r\n            data: {\r\n                drivers:[]\r\n            },\r\n            message: \"Drivers listed successfully !!\"\r\n        };\r\n\r\n\r\n        [err, result] = await to(validateLocation(req));\r\n\r\n        if (result && !result.isEmpty()) {\r\n            renderResponse(res, result, null, null);\r\n        }\r\n        \r\n        req.body.id = req.body.user.id;\r\n\r\n        [err, finalResponse.data.drivers] = await to(UserDao.nearByDrivers(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n        renderResponse(res, null, null, finalResponse);\r\n\r\n    } catch (e) {\r\n        renderResponse(res, null, e, null);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport async function login(req: Request, res: Response): Promise<any> {\r\n    try {\r\n\r\n        let err: any, result: any, user: any, driverProfile: any, device: any;\r\n        let finalResponse: any = {\r\n            code: Codes.OK,\r\n            data: {},\r\n            message: \"Logged in successfully !!\"\r\n        };\r\n\r\n        if (!req.body.email_or_mobile && !req.body.password) {\r\n            throw new Error(\"Insufficent credentials\");\r\n        }\r\n\r\n\r\n        [err, user] = await to(UserDao.login(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n\r\n        if (!user) {\r\n            if (req.body.email_or_mobile.indexOf(\"@\") > -1)\r\n                throw new Error(\"Incorrect password or email\");\r\n            else\r\n                throw new Error(\"Incorrect password or mobile number\");\r\n        }\r\n        /* \r\n                if (user.isVerified == 0)\r\n                    throw new Error(\"Your mobile number is not verified yet\"); */\r\n\r\n\r\n        req.body.id = user.id;\r\n        if (req.body.deviceType && req.body.deviceToken) {\r\n\r\n            [err, device] = await to(UserDao.updateDevice(req.body))\r\n\r\n            if (err) throw err;\r\n        }\r\n\r\n        [err, driverProfile] = await to(UserDao.getDriverById(user.id))\r\n        console.log(\"driverProfile =========\");\r\n        console.log(driverProfile);\r\n\r\n        _.extend(user, driverProfile);\r\n\r\n        let token = jwt.sign({\r\n            data: user\r\n        }, process.env.EncryptionKEY, { expiresIn: '7d' });\r\n\r\n\r\n        finalResponse.data.token = token;\r\n        finalResponse.data.user = user;\r\n\r\n        renderResponse(res, null, null, finalResponse);\r\n\r\n    } catch (e) {\r\n        renderResponse(res, null, e, null);\r\n    }\r\n\r\n\r\n}\r\n\r\n"],"sourceRoot":"../../../src"}