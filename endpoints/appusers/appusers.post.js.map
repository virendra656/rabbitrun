{"version":3,"sources":["endpoints/appusers/appusers.post.ts"],"names":[],"mappings":";;AACA,6CAA6C;AAE7C,gBAAuB,GAAY,EAAE,GAAa;IAEhD,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC,QAAQ,EAAE,CAAA;IACvD,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC,QAAQ,EAAE,CAAA;IACtD,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,2BAA2B,CAAC,CAAC,OAAO,EAAE,CAAA;IAE7D,GAAG,CAAC,mBAAmB,EAAE;SACtB,IAAI,CAAC,UAAS,MAAM;QACnB,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,mBAAU,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;iBAC/B,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC9C,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAA;QAC/C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAA;QAC3D,CAAC;IACH,CAAC,CAAC,CAAA;AACN,CAAC;AAhBD,wBAgBC;AAED,eAAsB,GAAY,EAAE,GAAa;IAE/C,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC,QAAQ,EAAE,CAAA;IACvD,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC,QAAQ,EAAE,CAAA;IACtD,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,2BAA2B,CAAC,CAAC,OAAO,EAAE,CAAA;IAE7D,GAAG,CAAC,mBAAmB,EAAE;SACtB,IAAI,CAAC,UAAS,MAAM;QACnB,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,mBAAU,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACnC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAA;QAC3D,CAAC;IACH,CAAC,CAAC;SACD,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC9C,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAA;AAC/C,CAAC;AAhBD,sBAgBC","file":"appusers.post.js","sourcesContent":["import { Request, Response } from 'express'\nimport { AppUserDao } from '../../dao/_index'\n\nexport function create(req: Request, res: Response) {\n\n  req.checkBody('pwd', 'Password is required').notEmpty()\n  req.checkBody('email', 'Email is required').notEmpty()\n  req.checkBody('email', 'A valid email is required').isEmail()\n\n  req.getValidationResult()\n    .then(function(result) {\n      if (result.isEmpty()) {\n        return AppUserDao.create(req.body)\n          .then(appuser => res.status(201).send(appuser))\n          .catch(error => res.boom.badRequest(error))\n      } else {\n        res.boom.badRequest('Validation errors', result.mapped())\n      }\n    })\n}\n\nexport function login(req: Request, res: Response) {\n\n  req.checkBody('pwd', 'Password is required').notEmpty()\n  req.checkBody('email', 'Email is required').notEmpty()\n  req.checkBody('email', 'A valid email is required').isEmail()\n\n  req.getValidationResult()\n    .then(function(result) {\n      if (result.isEmpty()) {\n        return AppUserDao.login(req.body)\n      } else {\n        res.boom.badRequest('Validation errors', result.mapped())\n      }\n    })\n    .then(appuser => res.status(200).send(appuser))\n    .catch(error => res.boom.badRequest(error))\n}\n"],"sourceRoot":"../../../src"}