{"version":3,"sources":["endpoints/customers/customer.post.ts"],"names":[],"mappings":"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","file":"customer.post.js","sourcesContent":["\r\nimport { Request, Response } from 'express'\r\nimport { to, renderResponse, generateUniqueId, OTPSend, EmailSend } from '../../util/helper';\r\nimport { validateCustomerRegisteration, validateCustomerChangePassword } from '../../util/Validators';\r\nimport { UserDao } from '../../dao/_index'\r\nimport { Codes } from '../../util/SiteConfig';\r\nimport * as jwt from 'jsonwebtoken';\r\n\r\nimport * as _ from 'lodash';\r\n\r\nexport async function register(req: Request, res: Response): Promise<any> {\r\n    try {\r\n        let err: any, result: any, user: any, customerProfile: any;\r\n        let finalResponse: any = {\r\n            code: Codes.CREATED,\r\n            data: {},\r\n            message: \"Registrated successfully !! We have sent you an otp please verify your mobile number\"\r\n        };\r\n\r\n        [err, result] = await to(validateCustomerRegisteration(req));\r\n\r\n        renderResponse(res, result, null, null);\r\n\r\n\r\n\r\n\r\n\r\n        [err, user] = await to(UserDao.findCustomerByEmailOrPhone(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n        if (user) {\r\n            if (req.body.mobile.replace(/ +?/g, '') == user.mobile)\r\n                throw new Error(\"User already exist with this mobile number\");\r\n\r\n\r\n            else if (req.body.email.toLowerCase() == user.email)\r\n                throw new Error(\"User already exist with this email address\");\r\n        }\r\n\r\n        req.body.verifyOTP = generateUniqueId(null, 6);\r\n\r\n        [err, user] = await to(UserDao.register(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n\r\n        [err, customerProfile] = await to(UserDao.setCustomerProfile(req.body, user))\r\n\r\n        if (err) throw err;\r\n\r\n        finalResponse.data.user = user;\r\n\r\n        renderResponse(res, null, null, finalResponse);\r\n\r\n        user.message = user.verifyOTP + \" is your one time password  to verify your account\";\r\n        user.subject = \" Rabbitrun Registration\";\r\n        user.html = `<p>Hello ${user.name},</p>\r\n\r\n        <p>${user.verifyOTP} is your one time password for to verify your account account.</p>\r\n        \r\n        <p>Regards,</p>\r\n        \r\n        <p>RabbitRun Team</p>\r\n        `;\r\n        OTPSend(user);\r\n        //EmailSend(user);\r\n\r\n    } catch (e) {\r\n        renderResponse(res, null, e, null);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport async function login(req: Request, res: Response): Promise<any> {\r\n    try {\r\n\r\n        let err: any, result: any, user: any, customerProfile: any ,device :any;\r\n        let finalResponse: any = {\r\n            code: Codes.OK,\r\n            data: {},\r\n            message: \"Logged in successfully !!\"\r\n        };\r\n\r\n        if (!req.body.email_or_mobile && !req.body.password) {\r\n            throw new Error(\"Insufficent credentials\");\r\n        }\r\n\r\n\r\n        [err, user] = await to(UserDao.login(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n\r\n        if (!user) {\r\n            if (req.body.email_or_mobile.indexOf(\"@\") > -1)\r\n                throw new Error(\"Incorrect password or email\");\r\n            else\r\n                throw new Error(\"Incorrect password or mobile number\");\r\n        }\r\n/* \r\n        if (user.isVerified == 0)\r\n            throw new Error(\"Your mobile number is not verified yet\"); */\r\n\r\n\r\n        req.body.id = user.id;\r\n        if (req.body.deviceType && req.body.deviceToken) {\r\n            \r\n        [err, device] = await to(UserDao.updateDevice(req.body))\r\n\r\n        if (err) throw err;\r\n        }\r\n\r\n        [err, customerProfile] = await to(UserDao.getCustomerById(user.id))\r\n\r\n        _.extend(user, customerProfile);\r\n\r\n        let token = jwt.sign({\r\n            data: user\r\n        }, process.env.EncryptionKEY, { expiresIn: '7d' });\r\n\r\n\r\n        finalResponse.data.token = token;\r\n        finalResponse.data.user = user;\r\n\r\n        renderResponse(res, null, null, finalResponse);\r\n\r\n    } catch (e) {\r\n        renderResponse(res, null, e, null);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport async function forgotPassword(req: Request, res: Response): Promise<any> {\r\n    try {\r\n        console.log(\"req\", req.body);\r\n        let err: any, result: any, user: any, customerProfile: any;\r\n        let finalResponse: any = {\r\n            code: Codes.OK,\r\n            data: {},\r\n            message: \"otp sent successfully on \"\r\n        };\r\n\r\n        if (!req.body.email_or_mobile) {\r\n            throw new Error(\"Please enter valid email or mobile number\");\r\n        }\r\n\r\n        req.body.email = req.body.email_or_mobile;\r\n        req.body.mobile = req.body.email_or_mobile;\r\n        [err, user] = await to(UserDao.findCustomerByEmailOrPhone(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n        if (!user) {\r\n            if (req.body.email_or_mobile.indexOf(\"@\") > -1)\r\n                throw new Error(\"Incorrect email address\");\r\n            else\r\n                throw new Error(\"Incorrect mobile number\");\r\n        }\r\n/* \r\n        if (user.isVerified == 0)\r\n            throw new Error(\"Your mobile number is not verified yet\"); */\r\n\r\n        user.forgotPasswordOTP = generateUniqueId(null, 6);\r\n\r\n        [err, customerProfile] = await to(UserDao.updateOTP(user))\r\n\r\n        if (err) throw err;\r\n\r\n        user.message = user.forgotPasswordOTP + \" is your one time password  to change your password\";\r\n        user.subject = \" Forgot Password on Rabbitrun\";\r\n        user.html = `<p>Hello User,</p>\r\n\r\n        <p>${user.forgotPasswordOTP} is your one time password  to reset your password</p>\r\n        \r\n        <p>Regards,</p>\r\n        \r\n        <p>RabbitRun Team</p>\r\n        `;\r\n        if (req.body.email_or_mobile.indexOf(\"@\") > -1) {\r\n            EmailSend(user);\r\n\r\n            finalResponse.message += \"registered email address\"\r\n        }\r\n        else {\r\n            OTPSend(user);\r\n            finalResponse.message += \"registered mobile number\"\r\n        }\r\n\r\n\r\n\r\n        finalResponse.data.user = user;\r\n\r\n        renderResponse(res, null, null, finalResponse);\r\n\r\n    } catch (e) {\r\n        renderResponse(res, null, e, null);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport async function verifyAccount(req: Request, res: Response): Promise<any> {\r\n    try {\r\n        let err: any, result: any, user: any, customerProfile: any;\r\n        let finalResponse: any = {\r\n            code: Codes.OK,\r\n            data: {},\r\n            message: \"Account verified successfully\"\r\n        };\r\n\r\n        if (!req.body.verifyOTP) {\r\n            throw new Error(\"otp is missing\");\r\n        }\r\n\r\n\r\n        [err, user] = await to(UserDao.findUserByOTP(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n        if (!user) {\r\n            throw new Error(\"Incorrect OTP\");\r\n        }\r\n\r\n        if (user.isVerified == 1)\r\n            throw new Error(\"Your account is already verified\");\r\n\r\n\r\n        [err, customerProfile] = await to(UserDao.verifyAccount(user))\r\n\r\n        if (err) throw err;\r\n        user.isVerified = 1;\r\n        finalResponse.data.user = user;\r\n\r\n        renderResponse(res, null, null, finalResponse);\r\n\r\n    } catch (e) {\r\n        renderResponse(res, null, e, null);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport async function getBusinessCategories(req: Request, res: Response): Promise<any> {\r\n    try {\r\n        let err: any, result: any, categories: any, customerProfile: any;\r\n        let finalResponse: any = {\r\n            code: Codes.OK,\r\n            data: {},\r\n            message: \"Categories found\"\r\n        };\r\n\r\n\r\n        [err, categories] = await to(UserDao.getBusinessCategories())\r\n\r\n        if (err) throw err;\r\n\r\n        finalResponse.data.categories = categories;\r\n\r\n        renderResponse(res, null, null, finalResponse);\r\n\r\n    } catch (e) {\r\n        renderResponse(res, null, e, null);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport async function changePassword(req: Request, res: Response): Promise<any> {\r\n    try {\r\n        let err: any, result: any, user: any, customerProfile: any;\r\n        let finalResponse: any = {\r\n            code: Codes.OK,\r\n            data: {},\r\n            message: \"Password reset successfully\"\r\n        };\r\n\r\n\r\n        [err, result] = await to(validateCustomerChangePassword(req));\r\n\r\n        renderResponse(res, result, null, null);\r\n\r\n\r\n\r\n        [err, user] = await to(UserDao.findUserByOTP(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n        if (!user) {\r\n            throw new Error(\"Incorrect OTP\");\r\n        }\r\n/* \r\n        if (user.isVerified == 0)\r\n            throw new Error(\"Your account is not verified yet\"); */\r\n\r\n\r\n        [err, customerProfile] = await to(UserDao.changePassword(req.body))\r\n\r\n        if (err) throw err;\r\n\r\n        finalResponse.data.user = user;\r\n\r\n        renderResponse(res, null, null, finalResponse);\r\n\r\n    } catch (e) {\r\n        renderResponse(res, null, e, null);\r\n    }\r\n\r\n\r\n}"],"sourceRoot":"../../../src"}