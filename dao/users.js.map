{"version":3,"sources":["dao/users.ts"],"names":[],"mappings":"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","file":"users.js","sourcesContent":["import * as uuid from 'uuid'\n\nconst { User, CustomerProfile, Category, DriverProfile, SocketConnections, sequelize, Booking } = require('../sqlz/models/_index');\nimport * as CryptoJS from 'crypto-js';\n\n\nconst sequelizeModule = require('sequelize')\n\nexport function findCustomerByEmailOrPhone(user: any): Promise<any> {\n  return User.findOne({\n    raw: true,\n    limit: 1,\n    where: {\n\n      $or: [\n        {\n          email:\n          {\n            $eq: user.email.toLowerCase()\n          }\n        },\n        {\n          mobile:\n          {\n            $eq: user.mobile.replace(/ +?/g, '')\n          }\n        }\n      ]\n    },\n    order: [['createdAt', 'DESC']]\n  });\n}\n\nexport function login(user: any): Promise<any> {\n  return User.findOne({\n    raw: true,\n    limit: 1,\n    where: {\n      password: CryptoJS.SHA512(user.password, process.env.EncryptionKEY).toString(),\n      $or: [\n        {\n          email:\n          {\n            $eq: user.email_or_mobile.toLowerCase()\n          }\n        },\n        {\n          mobile:\n          {\n            $eq: user.email_or_mobile.replace(/ +?/g, '')\n          }\n        }\n      ]\n    },\n    order: [['createdAt', 'DESC']]\n  });\n}\n\nexport function getBookings(params: any): Promise<any> {\n  params.page = params.page || 1;\n  params.limit = params.limit || 20;\n  return Booking.find({\n    raw: true,\n    offset: ((params.page - 1) * params.limit),\n    limit: params.limit,\n    where: {\n      status: 'COMPLETED',\n      $or: [\n        {\n          userId:\n          {\n            $eq: params.user_id\n          }\n        },\n        {\n          driverId:\n          {\n            $eq: params.user_id\n          }\n        }\n      ]\n    },\n    order: [['createdAt', 'DESC']]\n  });\n}\n\nexport function getBusinessCategories(): Promise<any> {\n  return Category.findAll({\n    raw: true,\n    limit: 1,\n    where: { isActive: 1 },\n    order: [['createdAt', 'DESC']]\n  });\n}\n\nexport function findUserByOTP(user: any): Promise<any> {\n  let obj = user.verifyOTP ? { verifyOTP: user.verifyOTP } : { forgotPasswordOTP: user.forgotPasswordOTP }\n  return User.findOne({\n    raw: true,\n    limit: 1,\n    where: obj,\n    order: [['createdAt', 'DESC']]\n  });\n}\n\n\n\nexport function getDriverById(userId: number): Promise<any> {\n  return DriverProfile.findOne({\n    raw: true,\n    limit: 1,\n    where: {\n      userId,\n    },\n    attributes: ['name', 'latitude', 'longitude', 'businessType'],\n    order: [['createdAt', 'DESC']]\n  });\n}\n\nexport function getCustomerById(userId: number): Promise<any> {\n  return CustomerProfile.findOne({\n    raw: true,\n    limit: 1,\n    where: {\n      userId,\n    },\n    attributes: ['name', 'latitude', 'longitude', 'businessType'],\n    order: [['createdAt', 'DESC']]\n  });\n}\n\nexport function register(user: any): Promise<any> {\n  return User\n    .create({\n      email: user.email.toLowerCase(),\n      verifyOTP: user.verifyOTP,\n      isVerified: user.isVerified ? 1 : 0,\n      role: user.role || 3,\n      mobile: user.mobile.replace(/ +?/g, ''),\n      password: CryptoJS.SHA512(user.password, process.env.EncryptionKEY).toString()\n    })\n}\n\nexport function updateDevice(user: any): Promise<any> {\n  return User.update(\n    { deviceType: user.deviceType, deviceToken: user.deviceToken },\n    { where: { id: user.id } }\n  );\n}\n\nexport async function updateBookingStatus(booking: any, driver: any, user: any): Promise<any> {\n\n  if (booking.status == 'INITIATED' || booking.status == 'COMPLETED' || booking.status == 'REJECTED') {\n    DriverProfile.update({\n      bookingStatus: booking.status == 'INITIATED' ? 'BOOKED' : ''\n    }, { where: { userId: driver.userId } })\n  }\n\n\n  return Booking.findOne({ where: { userId: user.userId, driverId: driver.userId, id: booking.id } })\n    .then(function (obj) {\n      if (obj) { // update\n        return obj.update({ status: booking.status, latitude: booking.latitude, longitude: booking.longitude, source: booking.source, destination: booking.destination });\n      }\n      else { // insert        \n        return Booking.create({ userId: user.userId, driverId: driver.userId, status: booking.status, latitude: booking.latitude, longitude: booking.longitude, source: booking.source, destination: booking.destination });\n      }\n    });\n}\n\nexport function getProfile(user: any): Promise<any> {\n  if (user.role == 3) {\n    return sequelize.query(`\n  SELECT cp.* ,u.id, u.email, u.mobile,u.role, u.isVerified, u.deviceType,u.deviceToken FROM users u \nJOIN customer_profiles cp on u.id = cp.userId \nwhere u.id = ${user.id};`, { type: sequelize.QueryTypes.SELECT })\n\n  }\n  else {\n    return sequelize.query(`\n    SELECT dp.* ,u.id, u.email, u.mobile,u.role, u.isVerified, u.deviceType,u.deviceToken FROM users u \n  JOIN driver_profiles dp on u.id = dp.userId \n  where u.id = ${user.id};`, { type: sequelize.QueryTypes.SELECT })\n  }\n\n}\n\n\nexport function nearByDrivers(user: any): Promise<any> {\n  let lati = user.latitude;\n  let longi = user.longitude;\n  return sequelize.query(`\n  SELECT\n    dp.userId,\n    \n    (3959 * ACOS(COS(RADIANS(${lati})) * COS(RADIANS(dp.latitude)) * COS(RADIANS(dp.longitude) - RADIANS(${longi})) + SIN(RADIANS(${lati})) * SIN(RADIANS(dp.latitude)))) AS distance,\n    dp.name,    \n    sc.socketId    \n  FROM driver_profiles  dp\n  JOIN socket_connections sc\n    ON sc.userId = dp.userId\n  WHERE 1 = 1\n  GROUP BY dp.userId\n  HAVING distance <= 550000\n  ORDER BY distance ASC;`, { type: sequelize.QueryTypes.SELECT })\n\n  /* return DriverProfile.findAll({\n    attributes: [[sequelizeModule.literal(\"6371 * acos(cos(radians(\" + lat + \")) * cos(radians(latitude)) * cos(radians(\" + lng + \") - radians(longitude)) + sin(radians(\" + lat + \")) * sin(radians(latitude)))\"), 'distance'], 'name', 'userId'],\n    order: sequelizeModule.col('distance'),\n    raw: true,\n    limit: 10,\n    include: [{ model: SocketConnections, attributes: [['socketId', 'userId']] }]\n\n  }); */\n}\n\nexport function findUserSocketConnection(user: any): Promise<any> {\n  return SocketConnections.findOne({ where: { userId: user.userId } });\n}\n\n\nexport function saveSocketConnection(user: any): Promise<any> {\n  return SocketConnections.findOne({ where: { userId: user.userId } })\n    .then(function (obj) {\n      if (obj) { // update\n        return obj.update(user);\n      }\n      else { // insert\n        return SocketConnections.create(user);\n      }\n    });\n}\n\nexport function updateDriverLocation(user: any): Promise<any> {\n  return DriverProfile.update(\n    { latitude: user.latitude, longitude: user.longitude },\n    { where: { id: user.id } }\n  );\n}\n\n\n\nexport function updateOTP(user: any): Promise<any> {\n  return User.update(\n    { forgotPasswordOTP: user.forgotPasswordOTP },\n    { where: { id: user.id } }\n  );\n}\n\nexport function verifyAccount(user: any): Promise<any> {\n  return User.update(\n    { isVerified: 1 },\n    { where: { id: user.id } }\n  );\n}\n\n\nexport function changePassword(user: any): Promise<any> {\n  return User.update(\n    { password: CryptoJS.SHA512(user.password, process.env.EncryptionKEY).toString(), isVerified: 1 },\n    { where: { forgotPasswordOTP: user.forgotPasswordOTP } }\n  );\n}\n\nexport function setDriverProfile(driver: any, user: any): Promise<any> {\n\n  return DriverProfile.create({\n    name: driver.name,\n    userId: user.id,\n    address: driver.address,\n    latitude: driver.latitude,\n    longitude: driver.longitude,\n    businessType: driver.businessType\n  })\n}\n\nexport function setCustomerProfile(customer: any, user: any): Promise<any> {\n\n  return CustomerProfile.create({\n    name: customer.name,\n    userId: user.id,\n    address: customer.address || '',\n    latitude: customer.latitude || 0.00,\n    longitude: customer.longitude || 0.00,\n    businessType: customer.businessType,\n    accountNumber: customer.accountNumber || \"\",\n    ifsc: customer.ifsc  || \"\",\n    bank_name: customer.bank_name  || \"\",\n    phone_number: customer.phone_number || \"\",\n    gst: customer.gst || \"\",\n    firm_name: customer.firm_name || \"\"\n  })\n}\n\n"],"sourceRoot":"../../src"}