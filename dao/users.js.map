{"version":3,"sources":["dao/users.ts"],"names":[],"mappings":"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","file":"users.js","sourcesContent":["import * as uuid from 'uuid'\n\nconst { User, CustomerProfile, Category } = require('../sqlz/models/_index');\nimport * as CryptoJS from 'crypto-js';\n\n\n\nexport function findCustomerByEmailOrPhone(user: any): Promise<any> {\n  return User.findOne({\n    limit: 1,\n    where: {\n\n      $or: [\n        {\n          email:\n          {\n            $eq: user.email.toLowerCase()\n          }\n        },\n        {\n          mobile:\n          {\n            $eq: user.mobile.replace(/ +?/g, '')\n          }\n        }\n      ]\n    },\n    order: [['createdAt', 'DESC']]\n  });\n}\n\nexport function login(user: any): Promise<any> {\n  return User.findOne({\n    limit: 1,\n    where: {\n      password: CryptoJS.SHA512(user.password, process.env.EncryptionKEY).toString(),\n      $or: [\n        {\n          email:\n          {\n            $eq: user.email_or_mobile.toLowerCase()\n          }\n        },\n        {\n          mobile:\n          {\n            $eq: user.email_or_mobile.replace(/ +?/g, '')\n          }\n        }\n      ]\n    },\n    order: [['createdAt', 'DESC']]\n  });\n}\n\nexport function getBusinessCategories(): Promise<any> {\n  return Category.findAll({\n    limit: 1,\n    where: {isActive:1},\n    order: [['createdAt', 'DESC']]\n  });\n}\n\nexport function findUserByOTP(user: any): Promise<any> {\n  let obj = user.verifyOTP ? {verifyOTP : user.verifyOTP} : {forgotPasswordOTP : user.forgotPasswordOTP} \n  return User.findOne({\n    limit: 1,\n    where: obj,\n    order: [['createdAt', 'DESC']]\n  });\n}\n\n\n\nexport function getCustomerById(userId: number): Promise<any> {\n  return User.findOne({\n    limit: 1,\n    where: {\n      userId,\n    },\n    attributes: ['name', 'latitude', 'longitude', 'businessType'],\n    order: [['createdAt', 'DESC']]\n  });\n}\n\nexport function register(user: any): Promise<any> {\n  return User\n    .create({\n      email: user.email.toLowerCase(),\n      verifyOTP: user.verifyOTP,\n      mobile: user.mobile.replace(/ +?/g, ''),\n      password: CryptoJS.SHA512(user.password, process.env.EncryptionKEY).toString()\n    })\n}\n\nexport function updateOTP(user: any): Promise<any> {\n  return User.update(\n    { forgotPasswordOTP: user.forgotPasswordOTP },\n    { where: { id: user.id } }\n  );\n}\n\nexport function verifyAccount(user: any): Promise<any> {\n  return User.update(\n    { isVerified: 1 },\n    { where: { id: user.id } }\n  );\n}\n\n\nexport function changePassword(user: any): Promise<any> {\n  return User.update(\n    { password: CryptoJS.SHA512(user.password, process.env.EncryptionKEY).toString() },\n    { where: { forgotPasswordOTP: user.forgotPasswordOTP } }\n  );\n}\n\nexport function setCustomerProfile(customer: any, user: any): Promise<any> {\n  return CustomerProfile.create({\n    name: customer.name,\n    userId: user.id,\n    address: customer.address,\n    latitude: customer.latitude,\n    longitude: customer.longitude,\n    businessType: customer.businessType,\n    accountNumber: customer.accountNumber,\n    ifsc: customer.ifsc,\n    bank_name: customer.bank_name,\n    phone_number: customer.phone_number\n  })\n}\n\n"],"sourceRoot":"../../src"}