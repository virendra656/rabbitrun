{"version":3,"sources":["server.ts"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["import * as express from 'express'\nimport * as winston from 'winston'\nimport * as boom from 'express-boom'\nimport * as morgan from 'morgan'\nimport * as cors from 'cors'\nimport * as _ from 'lodash'\nimport * as expressValidator from 'express-validator'\nimport { json, urlencoded } from 'body-parser'\nimport { Express } from 'express'\nimport * as routes from './routes/_index'\nimport * as dotenv from 'dotenv';\nimport { renderResponse, to } from './util/helper';\nimport { UserDao } from './dao/_index'\n\nconst PORT: number = 3000\n\n/**\n * Root class of your node server.\n * Can be used for basic configurations, for instance starting up the server or registering middleware.\n */\nexport class Server {\n\n  private app: Express\n\n  constructor() {\n\n    dotenv.config();\n    this.app = express();\n    var server = require('http').createServer(this.app);\n    var io = require('socket.io')(server);\n\n    this.app.use(function (err, req, res, next) {\n      console.error(\"err.stack\");\n    });\n\n    this.app.use(cors({\n      optionsSuccessStatus: 200\n    }))\n    this.app.use(urlencoded({\n      extended: true\n    }))\n    this.app.use(json())\n\n    this.app.use(boom());\n    this.app.use(morgan('combined'));\n    this.app.use(expressValidator());\n\n    routes.initRoutes(this.app);\n    this.app.use(function (err, req, res, next) {\n      console.error(\"err.stack\");\n      renderResponse(res, null, err, null);\n    });\n    //this.initSocket(io);\n    server.listen(PORT, () => {\n      winston.log('info', '--> Server successfully started at port %d', PORT);\n    });\n\n    io.on('connection', function (client) {\n      console.log('Client connected...', client.id);\n\n      client.on('join', function (data) {\n\n        try {\n          data = JSON.parse(data);\n        } catch (e) {\n          console.log(e)\n        }\n        console.log('Client joining...', data);\n        console.log('Client id...', client.id);\n        console.log('data id...', data.userId);\n\n        //console.log(io.sockets.sockets);\n        if (data && data.userId) {\n          data.socketId = client.id;\n          UserDao.saveSocketConnection(data);\n        }\n\n      });\n\n\n      client.on('searchDriver', async function (reading) {\n        console.log(\"searchDriver\");\n        let str = reading.toString('utf8');\n        console.log(\"String = %s\", str);\n        let data = JSON.parse(str);\n\n        console.log(\"searchDriver\", data);\n        try {\n          // data = JSON.parse(data);\n        } catch (e) {\n          //   console.log(e)\n        }\n        console.log(data); let source = data && data.source ? data.source : null;\n        if (source && source.latitude && source.longitude) {\n          let [err, res] = await to(UserDao.nearByDrivers(source));\n          console.log(\"drivers\");\n          console.log(res);\n\n          if (res && res.length) {\n            let items = [];\n            res.forEach(element => {\n              items.push(element);\n              if (io.sockets.sockets[element.socketId]) {\n                io.sockets.sockets[element.socketId].emit('bookingRequest', data);\n              }\n            });\n            console.log(Object.keys(io.sockets.sockets));\n          }\n        }\n\n      });\n\n      client.on('updateBookingStatus', async function (data) {\n\n        try {\n          data = JSON.parse(data);\n        } catch (e) {\n          console.log(e)\n        }\n        console.log(\"updateBookingStatus\", data);\n        let err;\n        let dbbooking;\n        let customer;\n        let booking = data && data.booking && data.booking.status ? data.booking : null;\n        let driver = data && data.driver && data.driver.userId ? data.driver : null;\n        let user = data && data.user && data.user.userId ? data.user : null;\n        if (booking && driver && user) {\n          [err, dbbooking] = await to(UserDao.updateBookingStatus(booking, driver, user));\n          console.log(\"dbbooking\");\n          console.log(dbbooking);\n          [err, customer] = await to(UserDao.findUserSocketConnection(user));\n\n          console.log(\"customer\");\n          console.log(customer);\n\n          if (customer && customer.socketId) {\n            if (io.sockets.sockets[customer.socketId]) {\n              data.booking = { id: dbbooking.dataValues.id, userId: dbbooking.dataValues.userId, driverId: dbbooking.dataValues.driverId, status: dbbooking.dataValues.status };\n              io.sockets.sockets[customer.socketId].emit('bookingStatusChanged', data);\n              client.emit('bookingStatusChanged', data);\n            }\n            console.log(Object.keys(io.sockets.sockets));\n          }\n        }\n\n      });\n\n\n      client.on('messages', function (data) {\n        client.emit('broad', data);\n        //\t\tclient.broadcast.emit('broad',data);\n        //client.broadcast.emit('broad',data);\n      });\n\n    })\n  }\n  initSocket(io) {\n\n\n  }\n  getApp() {\n    return this.app\n  }\n}\nnew Server()\n"],"sourceRoot":"../src"}