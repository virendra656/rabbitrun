{"version":3,"sources":["server.ts"],"names":[],"mappings":";;AAAA,mCAAkC;AAClC,mCAAkC;AAClC,qCAAoC;AACpC,iCAAgC;AAChC,6BAA4B;AAC5B,sDAAqD;AACrD,6CAA8C;AAE9C,0CAAyC;AACzC,iCAAiC;AACjC,0CAA+C;AAC/C,MAAM,IAAI,GAAW,IAAI,CAAA;AAMzB;IAIE;QACE,MAAM,CAAC,MAAM,EAAE,CAAC;QAChB,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAA;QAGpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;YAChB,oBAAoB,EAAE,GAAG;SAC1B,CAAC,CAAC,CAAA;QACH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,wBAAU,CAAC;YACtB,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC,CAAA;QACH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;YACxC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAA;QAE5B,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAI,EAAE,CAAC,CAAA;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;QAChC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAA;QAChC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE;YACpB,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,4CAA4C,EAAE,IAAI,CAAC,CAAA;QACzE,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;YACxC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAA;YAC1B,uBAAc,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,MAAM;QACJ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAA;IACjB,CAAC;CACF;AApCD,wBAoCC;AACD,IAAI,MAAM,EAAE,CAAA","file":"server.js","sourcesContent":["import * as express from 'express'\nimport * as winston from 'winston'\nimport * as boom from 'express-boom'\nimport * as morgan from 'morgan'\nimport * as cors from 'cors'\nimport * as expressValidator from 'express-validator'\nimport { json, urlencoded } from 'body-parser'\nimport { Express } from 'express'\nimport * as routes from './routes/_index'\nimport * as dotenv from 'dotenv';\nimport { renderResponse } from './util/helper';\nconst PORT: number = 3000\n\n/**\n * Root class of your node server.\n * Can be used for basic configurations, for instance starting up the server or registering middleware.\n */\nexport class Server {\n\n  private app: Express\n\n  constructor() {\n    dotenv.config();\n    this.app = express()\n\n    // Express middleware\n    this.app.use(cors({\n      optionsSuccessStatus: 200\n    }))\n    this.app.use(urlencoded({\n      extended: true\n    }))\n    this.app.use(function (err, req, res, next) {\n      console.error(\"err.stack\")\n      //renderResponse(res, null, err, null);\n    })\n    this.app.use(json())\n    this.app.use(boom())\n    this.app.use(morgan('combined'))\n    this.app.use(expressValidator())\n    this.app.listen(PORT, () => {\n      winston.log('info', '--> Server successfully started at port %d', PORT)\n    })\n    routes.initRoutes(this.app)\n    this.app.use(function (err, req, res, next) {\n      console.error(\"err.stack\")\n      renderResponse(res, null, err, null);\n    })\n  }\n\n  getApp() {\n    return this.app\n  }\n}\nnew Server()\n"],"sourceRoot":"../src"}