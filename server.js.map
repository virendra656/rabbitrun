{"version":3,"sources":["server.ts"],"names":[],"mappings":";;AAAA,mCAAkC;AAClC,mCAAkC;AAClC,qCAAoC;AACpC,iCAAgC;AAChC,6BAA4B;AAC5B,sDAAqD;AACrD,6CAA8C;AAE9C,0CAAyC;AACzC,iCAAiC;AACjC,0CAA+C;AAC/C,MAAM,IAAI,GAAW,IAAI,CAAA;AAMzB;IAIE;QAEE,MAAM,CAAC,MAAM,EAAE,CAAC;QAChB,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;QACrB,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpD,IAAI,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC;QAEtC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;YACxC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;YAChB,oBAAoB,EAAE,GAAG;SAC1B,CAAC,CAAC,CAAA;QACH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,wBAAU,CAAC;YACtB,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC,CAAA;QACH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAI,EAAE,CAAC,CAAA;QAEpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QACrB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAEjC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;YACxC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAC3B,uBAAc,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YAClB,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,4CAA4C,EAAE,IAAI,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,EAAE,CAAC,YAAY,EAAE,UAAU,MAAM;YAClC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YAEnC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,IAAI;gBAC9B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,UAAU,IAAI;gBAClC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAG7B,CAAC,CAAC,CAAC;QAEL,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,UAAU,CAAC,EAAE;IAGb,CAAC;IACD,MAAM;QACJ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAA;IACjB,CAAC;CACF;AA3DD,wBA2DC;AACD,IAAI,MAAM,EAAE,CAAA","file":"server.js","sourcesContent":["import * as express from 'express'\nimport * as winston from 'winston'\nimport * as boom from 'express-boom'\nimport * as morgan from 'morgan'\nimport * as cors from 'cors'\nimport * as expressValidator from 'express-validator'\nimport { json, urlencoded } from 'body-parser'\nimport { Express } from 'express'\nimport * as routes from './routes/_index'\nimport * as dotenv from 'dotenv';\nimport { renderResponse } from './util/helper';\nconst PORT: number = 3000\n\n/**\n * Root class of your node server.\n * Can be used for basic configurations, for instance starting up the server or registering middleware.\n */\nexport class Server {\n\n  private app: Express\n\n  constructor() {\n\n    dotenv.config();\n    this.app = express();\n    var server = require('http').createServer(this.app);\n    var io = require('socket.io')(server);\n\n    this.app.use(function (err, req, res, next) {\n      console.error(\"err.stack\");\n    });\n\n    this.app.use(cors({\n      optionsSuccessStatus: 200\n    }))\n    this.app.use(urlencoded({\n      extended: true\n    }))\n    this.app.use(json())\n\n    this.app.use(boom());\n    this.app.use(morgan('combined'));\n    this.app.use(expressValidator());\n\n    routes.initRoutes(this.app);\n    this.app.use(function (err, req, res, next) {\n      console.error(\"err.stack\");\n      renderResponse(res, null, err, null);\n    });\n    //this.initSocket(io);\n    server.listen(PORT, () => {\n      winston.log('info', '--> Server successfully started at port %d', PORT);\n    });\n\n    io.on('connection', function (client) {\n      console.log('Client connected...');\n\n      client.on('join', function (data) {\n        console.log(data);\n      });\n\n      client.on('messages', function (data) {\n        client.emit('broad', data);\n        //\t\tclient.broadcast.emit('broad',data);\n        //client.broadcast.emit('broad',data);\n      });\n\n    })\n  }\n  initSocket(io) {\n\n\n  }\n  getApp() {\n    return this.app\n  }\n}\nnew Server()\n"],"sourceRoot":"../src"}